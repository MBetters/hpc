// list.cvh
struct _list;
typedef struct _list List;


/* add(List* list, int value)
 * Input:  list, a pointer to a given Hash List
 *         value, a positive integer
 * Output: true if the value is successfully added,
 *         false if the value is not added
 * If add is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return false for wrong input
 * A value is successfully added if:
 * - it is a non-negative integer
 * - the value does not already exist in the list
 * - the list exists and is unlocked
 * - the value is successfully stored in the list 
 */
_Bool list_add(List* list, int value);


/* remove(List* list, int value)
 * Input:  list, a pointer to a given Hash List
 *         value, a positive integer
 * Output: true if the value is successfully discarded from the list
 *         false if the value is not discarded 
 * If discard is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return false for wrong input
 * A value is successfully discarded if:
 * - it is a non-negative integer
 * - the value initially exists in the list
 * - the list exists and is unlocked
 * - the value is successfully removed from the list
 */
_Bool list_remove(List* list, int value);


/* contains(List* list, int value)
 * Input:  list, a pointer to a given Hash List
 *         value, a positive integer
 * Output: true if the value exists in the list
 *         false if the value does not exist in the list 
 * If contains is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return false for wrong input
 * A value exists in the list if
 * - it is a non-negative integer
 * - the list exists and is unlocked
 * - the value can be referenced at some location in the list
 */
_Bool list_contains(List* list, int value);


/* create()
 * Output: Pointer to created list
 * If create is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return NULL for wrong input
 * A list is created if
 * - its memory has been allocated
 * - its values are initialized to -1
 * - the list can be referenced at some location in memory
 */
List* list_create();


/* destroy(List* list)
 * Input:  list, a pointer to a given Hash List
 * Output: always true (should switch to void)
 */
_Bool list_destroy(List* list); 

 void list_print(List* list);

 int list_size(List* list);
