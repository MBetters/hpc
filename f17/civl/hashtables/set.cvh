// set.cvl
#include <stdbool.h>

struct Set;
typedef struct Set _set;

/* add( _set* hash_set, int value)
 * Input:  hash_set, a pointer to a given Hash Set
 *         value, a positive integer
 * Output: true if the value is successfully added,
 *         false if the value is not added
 * If add is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return false for wrong input
 * A value is successfully added if:
 * - it is a non-negative integer
 * - the value does not already exist in the set
 * - the set exists and is unlocked
 * - the value is successfully stored in the set 
 */
bool add(_set* hash_set, int value);

/* discard(_set* hash_set, int value)
 * Input:  hash_set, a pointer to a given Hash Set
 *         value, a positive integer
 * Output: true if the value is successfully discarded from the set
 *         false if the value is not discarded 
 * If discard is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return false for wrong input
 * A value is successfully discarded if:
 * - it is a non-negative integer
 * - the value initially exists in the set
 * - the set exists and is unlocked
 * - the value is successfully removed from the set
 */
bool contains(_set* hash_set, int value);

/* contains(_set* hash_set, int value)
 * Input:  hash_set, a pointer to a given Hash Set
 *         value, a positive integer
 * Output: true if the value exists in the set
 *         false if the value does not exist in the set 
 * If discard is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return false for wrong input
 * A value exists in the set if
 * - it is a non-negative integer
 * - the set exists and is unlocked
 * - the value can be referenced at some location in the set
 */

bool contains(_set* hash_set, int value)

/* create(int size)
 * Input:  size, a positive integer
 * Output: a given set, such that 
 * If discard is given faulty input (ex: a negative number, a non-integer, etc.), 
 * the code will return false for wrong input
 * A value exists in the set if
 * - it is a non-negative integer
 * - the set exists and is unlocked
 * - the value can be referenced at some location in the set
 */

_set* create(int size);
bool destroy(_set* hash_set); 
list get_all

