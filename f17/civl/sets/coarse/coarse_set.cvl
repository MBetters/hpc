#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int SIZE = 5;
bool LOCK = false;


struct _set;

typedef struct _set{
	int** table;
	bool lock;
	int items;
} Set;




int hash_fxn(int x){
    return (x % SIZE);
}

// acquire (-1), release (0) locks
$atomic_f void acquire(Set* hash_set, int value)
{
    $when(hash_set->lock == false) hash_set->lock = true;
    
}

$atomic_f void release(Set* hash_set, int value)
{
    hash_set->lock = false;
    
}

bool set_resize(Set* hash_set){
	
}

bool set_contains(Set* hash_set, int value){
	acquire(hash_set,value);
	
	int val;
	
	val = (int) hash_set->table[hash_fxn(value)];
	
	release(hash_set,value);
	
	return (val == value);
  //use a hash code to check and see if item is in the bucket
  
}

bool set_add(Set* hash_set, int value){
	acquire(hash_set,value);
	
	if (!contains(hash_set,value)){ //if the hash set does not contain the element
		hash_set->table[hash_fxn(value)] = (int*) value;
		printf("added %d to table[%d]\n", value, hash_fxn(value));
		release(hash_set,value);
		return true;
	}
	else{
		release(hash_set,value);
		return false;
	}
	 
}

bool set_remove(Set* hash_set, int value){
	acquire(hash_set,value);
	
	int val;
	
	val = (int) hash_set->table[hash_fxn(value)];
	
	if (val == value){
		int temp = val;
		hash_set->table[hash_fxn(value)] = 0;
		printf("removed %d from table[%d]\n", temp, hash_fxn(value));
		release(hash_set,value);
		return true;
	}
	
	else{
		release(hash_set,value);
		return false;
	}
}

void print_hash(Set* hash_set){
   // print table
   printf("table: ");
   for(int i = 0; i < SIZE; i++){
       printf("%d ", hash_set->table[i]);
   }
   printf("\n");
}

Set* set_create(){
	Set *set;
	set->item = 0;
	set->lock = false;
	set->table = (int **) malloc(SIZE * sizeof(int*)); //table of size 5
	for (int i = 0; i < SIZE; i++){
		set->table[i] = (int *) calloc (1 , sizeof(int));
	}
	return set;
}

bool set_destroy(){
	for(int i = 0; i < SIZE; i++){
		free(set->table[i]);
	}
	free(table);
	free(set);
	return true;
}



// int main(){
// 	set_create();
//
// 	add(&set,20);
// 	print_hash(&set);
// 	add(&set,17);
// 	print_hash(&set);
// 	discard(&set,17);
// 	print_hash(&set);
// 	add(&set,46);
// 	print_hash(&set);
// 	add(&set,30);
// 	print_hash(&set);
//
//
//
// 	set_destroy();
// 	return 0;
// }
