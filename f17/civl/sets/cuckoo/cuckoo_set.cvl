/* Concurrent Cuckoo Hashset
   Description
   Devlan Horner 2017 UDel VIP-HPC
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define NUM_TABLES 2

struct _set{
  // int* moved; //elements moved by the relocate() function
  // int* locations; //corresponding locations of the moved elements
  int items; //number of entries in a table
  int num_probes; //number of probes per table
  int probe_size; //max number of items in a probe
  int threshold; //resize when capacity reaches this size
  int limit; //resize when chain of phases exceeds this
  int*** table; //table of arrays
  _Bool** locks;  //locks array
};

typedef struct _set Set;

void locks_print(Set* hashset){
  for(int i = 0; i < NUM_TABLES; i++){
    for(int j = 0; j < hashset->num_probes; j++){
      printf("%d ", hashset->locks[i][j]);
    }
    printf("\n");
  }
  printf("\n");
}

void set_print(Set* hashset){
  for (int i = 0; i < NUM_TABLES; i++){
    printf("Table %d\n", i);
    for (int j = 0; j < hashset->num_probes; j++){
      for (int k = 0; k < hashset->probe_size; k++){
        printf("%d ", hashset->table[i][j][k]);
      }
      printf("\n");
    }
    printf("\n");
  }
  printf("\n");
}

//hash function definition for table0
int set_hash0(Set* hashset, int x)
{
    return (x % 9) % hashset->num_probes;
}

//hash function definition for table1
int set_hash1(Set* hashset, int x)
{
    return (x % 11) % hashset->num_probes;
}

$atomic_f void acquire(Set* hashset, int value)
{
  int h0 = set_hash0(hashset, value);
  int h1 = set_hash1(hashset, value);
  $when(hashset->locks[0][h0] == false) hashset->locks[0][h0] = true;
  $when(hashset->locks[1][h1] == false) hashset->locks[1][h1] = true;
  //locks_print(hashset);
}

$atomic_f void release(Set* hashset, int value)
{
    hashset->locks[0][set_hash0(hashset, value)] = false;
    hashset->locks[1][set_hash1(hashset, value)] = false;
    //locks_print(hashset);
}

//returns true if hashtable contains item x
_Bool set_contains(Set* hashset, int x)
{
  acquire(hashset, x);
  int h0 = set_hash0(hashset, x);
  int h1 = set_hash1(hashset, x);
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[0][h0][i] == x){
      release(hashset, x);
      //printf("%d is in table 0, node %d, index %d\n", x, h0, i);
      return true;
    } else if(hashset->table[1][h1][i] == x){
      release(hashset, x);
      //printf("%d is in table 1, node %d, index %d\n", x, h1, i);
      return true;
    }
  }

  release(hashset, x);
  //printf("%d is not in the table\n", x);
  return false;

}


_Bool set_resize(Set* hashset){
  printf("Time to resize...\n");

  //acquire all locks
  for (int i = 0; i < hashset->num_probes; i++){
    acquire(hashset,i);
  }
  
  int*** old = hashset->table;
  hashset->probe_size = hashset->probe_size * 2;
  hashset->threshold = hashset->threshold * 2;
  hashset->table = (int ***) malloc(NUM_TABLES * sizeof(int **));
  for (int i = 0; i < NUM_TABLES; i++){
    hashset->table[i] = (int **) malloc(hashset->num_probes * sizeof(int *));
    for (int j = 0; j < hashset->num_probes; j++){
      hashset->table[i][j] = (int *) calloc(hashset->probe_size, sizeof(int));
    }
  }

  for(int i = 0; i < NUM_TABLES; i++){
    for(int j = 0; j < hashset->num_probes; j++){
      for(int k = 0; k < hashset->probe_size; k++){
        hashset->table[i][j][k] = -1;
      }
    }
  }

  set_print(hashset);

  //add the old elements to the new table
  for(int i = 0; i < NUM_TABLES; i++){
    for(int j = 0; j < hashset->num_probes; j++){
      for(int k = 0; k < hashset->probe_size/2; k++){
        if(old[i][j][k] != -1)
          hashset->table[i][j][k] = old[i][j][k];
      }
    }
  }

  // free memory of old table
  for(int j = 0; j < NUM_TABLES; j++){
    for (int i = 0; i < hashset->num_probes; i++){
      free(old[j][i]);
    }
    free(old[j]);
  }
  free(old);
  
  for (int j = 0; j < hashset->num_probes; j++){
    release(hashset, j);
  }

  set_print(hashset);

  return true;
}

int probe_get_items(Set* hashset, int tableIndex, int probeIndex){
  int count = 0;
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[tableIndex][probeIndex][i] != -1)
      count++;
  }
  return count;
}

_Bool probe_add(Set* hashset, int tableIndex, int probeIndex, int x){
  acquire(hashset, x);
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[tableIndex][probeIndex][i] == -1){
      hashset->table[tableIndex][probeIndex][i] = x;
      printf("%d added at table %d and probe %d\n", x, tableIndex, probeIndex);
      release(hashset, x);
      return true;
    }
  }
  printf("%d not added\n", x);
  release(hashset, x);
  return false;
}

_Bool probe_remove(Set* hashset, int tableIndex, int probeIndex, int x){
  acquire(hashset, x);
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[tableIndex][probeIndex][i] == x){
      hashset->table[tableIndex][probeIndex][i] = -1;
      printf("Successful removed %d\n", x);
      release(hashset, x);
      return true;
    }
  }
  printf("Failed to remove %d\n", x);
  release(hashset, x);
  return false;
}

_Bool set_remove(Set* hashset, int x){
  //acquire(hashset, x);
  if(set_contains(hashset, x)){
    int h0 = set_hash0(hashset, x);
    int h1 = set_hash1(hashset, x);
    acquire(hashset, x);
    for(int i = 0; i < hashset->probe_size; i++){
      if(hashset->table[0][h0][i] == x){
        hashset->table[0][h0][i] = -1;
        release(hashset, x);
        printf("Successfully removed %d\n", x);
        return true;
      } else if(hashset->table[1][h1][i] == x){
        hashset->table[1][h1][i] = -1;
        release(hashset, x);
        printf("Successfully removed %d\n", x);
        return true;
      }
    }
  }

  for(int i=0; i<NUM_TABLES; i++){
    for(int j=0; j<hashset->num_probes; j++){
      for(int k=0; k<hashset->probe_size; k++){
        if(hashset->table[i][j][k] == x){
          hashset->table[i][j][k] = -1;
          return true;
        }
      }
    }
  }

  
  printf("Failed to remove %d\n", x);
  return false; //x is not in set
}


_Bool relocate(Set* hashset, int i, int hi){
  printf("RELOCATING**************************\n");
  int hj = 0;
  int j = 1 - i;
  for(int round = 0; round < hashset->limit; round++){
    int y = hashset->table[i][hi][0];
    if(i == -1){
      hj = set_hash1(hashset, y);
    } else if(i == 1){
      hj = set_hash0(hashset, y);
    }

    if(probe_remove(hashset, i, hi, y)){
      if(probe_get_items(hashset, j, hj) < hashset->threshold){
        probe_add(hashset, j, hj, y);
        //release(hashset, y);
        return true;
      } else if(probe_get_items(hashset, j, hj) < hashset->probe_size){
        probe_add(hashset, j, hj, y);
        i = 1 - i;
        hi = hj;
        j = 1 - j;
      } else{
        probe_add(hashset, i, hi, y);
        return false;
      }
    } else if(probe_get_items(hashset, i, hi) >= hashset->threshold){
      continue;
    } else{
      return true;
    }

  }
  return false;
}


_Bool set_add(Set* hashset, int x){
  _Bool mustResize = false;
  int i = -1;
  int h = -1;
  if(x > 0 && !set_contains(hashset, x)){
    int h0 = set_hash0(hashset, x);
    int h1 = set_hash1(hashset, x);
    int h0_size = probe_get_items(hashset, 0, h0);
    int h1_size = probe_get_items(hashset, 1, h1);
    if(h0_size < hashset->threshold){
      probe_add(hashset, 0, h0, x);
      return true;
    } else if(h1_size < hashset->threshold){
      probe_add(hashset, 1, h1, x);
      return true;
    } else if(h0_size < hashset->probe_size){
      i = 0;
      h = h0;
      probe_add(hashset, i, h, x);
    } else if(h1_size < hashset->probe_size){
      i = 1;
      h = h1;
      probe_add(hashset, i, h, x);
    } else{
      printf("mustResize is true\n");
      mustResize = true;
    }
  } else if(set_contains(hashset, x)){
    return true;
  }

  if(mustResize){
    printf("resize and add\n");
    set_resize(hashset);
    set_add(hashset, x);
  } else if(!relocate(hashset, i, h)){
    printf("resize\n");
    set_resize(hashset);
  }
  return true;
}


_Bool set_destroy(Set* hashset){
  for(int i = 0; i < NUM_TABLES; i++){
    for(int j = 0; j < hashset->num_probes; j++){
      free(hashset->table[i][j]);
    }
    free(hashset->locks[i]);
    free(hashset->table[i]);
  }
  free(hashset->locks);
  free(hashset->table);
  free(hashset);
  return true;
}


Set* set_create()
{
    Set* set;
    set = (Set *) malloc(sizeof(Set));
    set->num_probes = 4;
    set->probe_size = 4;
    set->threshold = set->probe_size / 2;
    set->limit = 8;
    set->items = 0; //init item counter
        
    set->table = (int ***) malloc(NUM_TABLES * sizeof(int **));
    for(int i = 0; i < NUM_TABLES; i++){
      set->table[i] = (int **) malloc(set->num_probes * sizeof(int *));
      for(int j = 0; j < set->num_probes; j++){
        set->table[i][j] = (int *) calloc(set->probe_size, sizeof(int));
      }
    }

    for(int i = 0; i < NUM_TABLES; i++){
      for (int j = 0; j < set->num_probes; j++){
        for(int k = 0; k < set->probe_size; k++){
          set->table[i][j][k] = -1;
        }
      }
    }

    set->locks = (_Bool **) malloc(NUM_TABLES * sizeof(int*));
    for(int i = 0; i < NUM_TABLES; i++){
      set->locks[i] = (_Bool *) malloc(set->num_probes * sizeof(_Bool));
    }

    for(int i = 0; i < NUM_TABLES; i++){
      for(int j = 0; j < set->num_probes; j++){
        set->locks[i][j] = false;
      }
    }

    set_print(set);
    locks_print(set);

    return set;
}

/*
int main(int argc, char* argv[]){
  printf("Working\n");
  Set* hset;
  hset = set_create();

  printf("\nTESTING ADD\n");
  for(int i = 1; i <= 100; i++){
    set_add(hset, i);
  }
  set_print(hset);
  
  printf("\nTESTING CONTAINS\n");
  printf("%d\n", set_contains(hset, 3));
  printf("%d\n", set_contains(hset, 16));
  printf("%d\n", set_contains(hset, 162));

  
  printf("\nTESTING REMOVE\n");
  for(int i = 0; i <= 100; i++){
    set_remove(hset, i);
  }
  set_print(hset);
  //free memory
  set_destroy(hset);

  return 0;
}
*/