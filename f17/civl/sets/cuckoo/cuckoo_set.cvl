/* Concurrent Cuckoo Hashset
   Description
   Devlan Horner 2017 UDel VIP-HPC
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define NUM_TABLES 2

struct _set;

typedef struct _set{
	int items; //number of entries in a table
  int num_probes; //number of probes per table
  int probe_size; //max number of items in a probe
  int threshold; //resize when capacity reaches this size
  int limit; //resize when chain of phases exceeds this
	int*** table; //table of arrays
  bool* locks;  //locks array
} Set;

void acquire(Set* hashset, int value)
{
    //$when(hash_set->locks[(value % hash_set->locksSize)] == false) hash_set->locks[lock_hash(hash_set,value)] = true;
}

void release(Set* hashset, int value)
{
    //hash_set->locks[lock_hash(hash_set,value)] = false;
}

//hash function definition for table0
int set_hash0(Set* hashset, int x)
{
    return (x % 9) % hashset->num_probes;
}

//hash function definition for table1
int set_hash1(Set* hashset, int x)
{
    return (x % 11) % hashset->num_probes;
}

bool set_resize(Set* hashset){
  return true;
}

//returns true if hashtable contains item x
bool set_contains(Set* hashset, int x)
{
  acquire(hashset, x);
  int h0 = set_hash0(hashset, x);
  int h1 = set_hash1(hashset, x);
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[0][h0][i] == x){
      release(hashset, x);
      //printf("%d is in table 0, node %d, index %d\n", x, h0, i);
      return true;
    } else if(hashset->table[1][h1][i] == x){
      release(hashset, x);
      //printf("%d is in table 1, node %d, index %d\n", x, h1, i);
      return true;
    }
  }
  release(hashset, x);
  //printf("%d is not in the table\n", x);
  return false;

}

void set_print(Set* hashset){
  for (int i = 0; i < NUM_TABLES; i++){
    for (int j = 0; j < hashset->num_probes; j++){
      for (int k = 0; k < hashset->probe_size; k++){
        printf("%d ", hashset->table[i][j][k]);
      }
    }
    printf("\n");
  }
}

int probe_get_items(Set* hashset, int tableIndex, int probeIndex){
  int count = 0;
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[tableIndex][probeIndex][i] != 0)
      count++;
  }
  return count;
}

bool probe_add(Set* hashset, int tableIndex, int probeIndex, int x){
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[tableIndex][probeIndex][i] == 0){
      hashset->table[tableIndex][probeIndex][i] = x;
      printf("%d added at table %d and probe %d\n", x, tableIndex, probeIndex);
      return true;
    }
  }
  printf("%d not added\n", x);
  return false;
}

bool probe_remove(Set* hashset, int tableIndex, int probeIndex, int x){
  for(int i = 0; i < hashset->probe_size; i++){
    if(hashset->table[tableIndex][probeIndex][i] == x){
      hashset->table[tableIndex][probeIndex][i] = 0;
      printf("Successful removed %d\n", x);
      return true;
    }
  }
  printf("Failed to remove %d\n", x);
  return false;
}

bool set_remove(Set* hashset, int x){
  acquire(hashset, x);
  if(set_contains(hashset, x)){
    int h0 = set_hash0(hashset, x);
    int h1 = set_hash1(hashset, x);
    for(int i = 0; i < hashset->probe_size; i++){
      if(hashset->table[0][h0][i] == x){
        hashset->table[0][h0][i] = 0;
        release(hashset, x);
        return true;
      } else if(hashset->table[1][h1][i] == x){
        hashset->table[1][h1][i] = 0;
        release(hashset, x);
        return true;
      }
    }
  }
  release(hashset, x);
  return false; //x is not in set
}


bool relocate(Set* hashset, int i, int hi){
  printf("RELOCATING**************************\n");
  int hj = 0;
  int j = 1 - i;
  for(int round = 0; round < hashset->limit; round++){
    printf("round: %d\n", round);
    printf("hi: %d, i: %d\n", hi, i);
    printf("hj: %d, j: %d\n", hj, j);
    int y = hashset->table[i][hi][0];
    if(i == 0){
      hj = set_hash1(hashset, y);
    } else if(i == 1){
      hj = set_hash0(hashset, y);
    }
    acquire(hashset, y);
    if(probe_remove(hashset, i, hi, y)){
      if(probe_get_items(hashset, j, hj) < hashset->threshold){
        probe_add(hashset, j, hj, y);
        release(hashset, y);
        return true;
      } else if(probe_get_items(hashset, j, hj) < hashset->probe_size){
        probe_add(hashset, j, hj, y);
        i = 1 - i;
        hi = hj;
        j = 1 - j;
      } else{
        probe_add(hashset, i, hi, y);
        release(hashset, y);
        return false;
      }
    } else if(probe_get_items(hashset, i, hi) >= hashset->threshold){
      continue;
    } else{
      release(hashset, y);
      return true;
    }
  }
  return false;
}


bool set_add(Set* hashset, int x){
  acquire(hashset, x);
  bool mustResize = false;
  int i = -1;
  int h = -1;
  if(x > 0 && !set_contains(hashset, x)){
    int h0 = set_hash0(hashset, x);
    int h1 = set_hash1(hashset, x);
    int h0_size = probe_get_items(hashset, 0, h0);
    int h1_size = probe_get_items(hashset, 1, h1);
    if(h0_size < hashset->threshold){
      probe_add(hashset, 0, h0, x);
      release(hashset, x);
      return true;
    } else if(h1_size < hashset->threshold){
      probe_add(hashset, 1, h1, x);
      release(hashset, x);
      return true;
    } else if(h0_size < hashset->probe_size){
      printf("h0 < probe_size\n");
      i = 0;
      h = h0;
      probe_add(hashset, i, h, x);
    } else if(h1_size < hashset->probe_size){
      printf("h1 < probe_size\n");
      i = 1;
      h = h1;
      probe_add(hashset, i, h, x);
    } else{
      printf("mustResize is true\n");
      mustResize = true;
    }
    release(hashset, x);
  }
  if(set_contains(hashset, x)){
    printf("set already contains %d\n", x);
    return true;
  } else if(mustResize){
    printf("resize and add\n");
    set_resize(hashset);
    //set_add(hashset, x);
  } else if(!relocate(hashset, i, h)){
    printf("resize\n");
    set_resize(hashset);
  }
  release(hashset, x);
  return true;
}


void set_destroy(Set* hashset){
  for(int i = 0; i < NUM_TABLES; i++){
    for(int j = 0; j < hashset->num_probes; j++){
      free(hashset->table[i][j]);
    }
    free(hashset->table[i]);
  }
  free(hashset->table);
  free(hashset);
}


Set* set_create()
{
    Set* set;
    set = (Set *) malloc(sizeof(Set));
    set->num_probes = 4;
    set->probe_size = 4;
    set->threshold = set->probe_size / 2;
    set->limit = 8;
    set->items = 0; //init item counter
    //set->locksSize = set->size;
        
    set->table = (int ***) malloc(NUM_TABLES * sizeof(int **));
    for(int i = 0; i < NUM_TABLES; i++){
      set->table[i] = (int **) malloc(set->num_probes * sizeof(int *));
      for(int j = 0; j < set->num_probes; j++){
        set->table[i][j] = (int *) calloc(set->probe_size, sizeof(int));
      }
    }

    set_print(set);
    // }
    //alloc all locks at open (0)
    //set->locks = (bool *) malloc(set->locksSize * sizeof(bool));

    //init locks at false for all
    //for (int k = 0; k < set->locksSize; k++)
    //    set->locks[k] = false;

    return set;
}


int main(int argc, char* argv[]){
	printf("Working\n");
  Set* hset;
  hset = set_create();
  
  printf("%d\n", set_contains(hset, 3));
  printf("%d\n", set_contains(hset, 0));
  
  set_add(hset, 3);
  set_add(hset, 5);
  set_add(hset, 30);
  set_add(hset, 54);
  set_add(hset, 32);
  set_add(hset, 51);
  set_add(hset, 32);
  set_add(hset, 45);
  set_add(hset, 45);
  set_add(hset, 31);
  set_add(hset, 52);
  set_add(hset, 39);
  set_add(hset, 52);
  set_add(hset, 36);
  set_add(hset, 99);
  set_add(hset, 8);
  set_add(hset, 17);
  set_add(hset, 11);
  set_add(hset, 37);
  set_add(hset, 51);
  set_add(hset, 32);
  set_add(hset, 59);
  set_add(hset, 31);
  set_add(hset, 50);
  set_add(hset, 34);
  set_add(hset, 49);
  set_add(hset, 47);
  set_add(hset, 37);
  set_add(hset, 58);
  set_add(hset, 33);
  set_add(hset, 5);
  set_add(hset, 6);
  set_add(hset, 91);
  set_add(hset, 88);
  set_add(hset, 14);
  set_add(hset, 19);
  set_print(hset);
  printf("\n");
  set_remove(hset, 54);
  set_remove(hset, 30);
  set_remove(hset, 3);
  set_remove(hset, 5);
  set_print(hset);
  
  //free memory
  set_destroy(hset);

  return 0;
}